name: Build
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
        cc: [clang]
    runs-on: ${{ matrix.os }}
    env:
      CC: ${{ matrix.cc }}
      VERSION: '10.17'
    steps:
    - uses: actions/checkout@v4
    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: jq libasound2-dev libasound2-plugins libpulse-dev libdbus-1-dev libfontconfig1-dev \
          libfreetype-dev libpng-dev libjpeg-dev libtiff-dev zlib1g-dev libbz2-dev liblzma-dev \
          libgnutls28-dev libssl-dev libgl1-mesa-dev libglu1-mesa-dev libvulkan-dev \
          libx11-dev libxext-dev libxrender-dev libxrandr-dev libxfixes-dev \
          libxcomposite-dev libxcursor-dev libxi-dev libxinerama-dev libxkbcommon-dev libxkbcommon-x11-dev libxtst-dev libxpm-dev \
          libxss-dev libxkbfile-dev \
          libunwind-dev libudev-dev libcap-dev libnss3-dev libcups2-dev libbluetooth-dev libasound2-plugins \
          libsmbclient-dev samba-common-bin libldap2-dev libsasl2-dev libkrb5-dev libidn2-dev libgcrypt20-dev \
          libgphoto2-dev libusb-1.0-0-dev libcurl4-openssl-dev \
          libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libsndfile1-dev \
          libxxf86vm-dev libwayland-dev ocl-icd-opencl-dev libpcap-dev \
          libpcsclite-dev libsane-dev libv4l-dev libsdl2-dev libcapi20-dev
        version: 1.0
    - name: configure
      run: ./configure --enable-win64 
    - uses: vapier/coverity-scan-action@v1
      with:
        project: 'Wine'
        email: ${{ secrets.EMAIL }}
        token: ${{ secrets.TOKEN }}
        command: 'make -j5 -k || true'
        version: ${{ env.VERSION }}
        description: 'Wine ${{ env.VERSION }}'
    - name: Processing
      run: |
        response=$(curl -s -X POST \
          -d version="$VERSION" \
          -d description="Wine $VERSION" \
          -d email="${{ secrets.EMAIL }}" \
          -d token="${{ secrets.TOKEN }}" \
          -d file_name="cov-int.tgz" \
          https://scan.coverity.com/projects/243/builds/init)
        upload_url=$(echo "$response" | jq -r '.url')
        build_id=$(echo "$response" | jq -r '.build_id')
        if [ -z "$upload_url" ] || [ -z "$build_id" ]; then
        echo "Error: Failed to initialize Coverity build. Response: $response"
          exit 1
        fi
        curl -X PUT \
          --header 'Content-Type: application/json' \
          --upload-file cov-int.tgz \
          "$upload_url"
        curl -X PUT \
          -d token="${{ secrets.TOKEN }}" \
          https://scan.coverity.com/projects/243/builds/$build_id/enqueue
        echo "Coverity scan enqueued successfully. Build ID: $build_id"
